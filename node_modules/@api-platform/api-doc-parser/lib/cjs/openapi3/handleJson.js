"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeTrailingSlash = void 0;
var tslib_1 = require("tslib");
var jsonref_1 = require("jsonref");
var lodash_get_1 = tslib_1.__importDefault(require("lodash.get"));
var inflection_1 = require("inflection");
var Field_1 = require("../Field");
var Operation_1 = require("../Operation");
var Parameter_1 = require("../Parameter");
var Resource_1 = require("../Resource");
var getResources_1 = tslib_1.__importDefault(require("../utils/getResources"));
var getType_1 = tslib_1.__importDefault(require("./getType"));
var isRef = function (maybeRef) {
    return !("$ref" in maybeRef);
};
var removeTrailingSlash = function (url) {
    if (url.endsWith("/")) {
        url = url.slice(0, -1);
    }
    return url;
};
exports.removeTrailingSlash = removeTrailingSlash;
var mergeResources = function (resourceA, resourceB) {
    var _a, _b, _c;
    (_a = resourceB.fields) === null || _a === void 0 ? void 0 : _a.forEach(function (fieldB) {
        var _a, _b;
        if (!((_a = resourceA.fields) === null || _a === void 0 ? void 0 : _a.some(function (fieldA) { return fieldA.name === fieldB.name; }))) {
            (_b = resourceA.fields) === null || _b === void 0 ? void 0 : _b.push(fieldB);
        }
    });
    (_b = resourceB.readableFields) === null || _b === void 0 ? void 0 : _b.forEach(function (fieldB) {
        var _a, _b;
        if (!((_a = resourceA.readableFields) === null || _a === void 0 ? void 0 : _a.some(function (fieldA) { return fieldA.name === fieldB.name; }))) {
            (_b = resourceA.readableFields) === null || _b === void 0 ? void 0 : _b.push(fieldB);
        }
    });
    (_c = resourceB.writableFields) === null || _c === void 0 ? void 0 : _c.forEach(function (fieldB) {
        var _a, _b;
        if (!((_a = resourceA.writableFields) === null || _a === void 0 ? void 0 : _a.some(function (fieldA) { return fieldA.name === fieldB.name; }))) {
            (_b = resourceA.writableFields) === null || _b === void 0 ? void 0 : _b.push(fieldB);
        }
    });
    return resourceA;
};
var buildResourceFromSchema = function (schema, name, title, url) {
    var description = schema.description;
    var properties = schema.properties || {};
    var fieldNames = Object.keys(properties);
    var requiredFields = schema.required || [];
    var readableFields = [];
    var writableFields = [];
    var fields = fieldNames.map(function (fieldName) {
        var property = properties[fieldName];
        var type = (0, getType_1.default)(property.type || "string", property.format);
        var field = new Field_1.Field(fieldName, {
            id: null,
            range: null,
            type: type,
            arrayType: type === "array" && "items" in property
                ? (0, getType_1.default)(property.items.type || "string", property.items.format)
                : null,
            reference: null,
            embedded: null,
            nullable: property.nullable || false,
            required: !!requiredFields.find(function (value) { return value === fieldName; }),
            description: property.description || "",
        });
        if (!property.writeOnly) {
            readableFields.push(field);
        }
        if (!property.readOnly) {
            writableFields.push(field);
        }
        return field;
    });
    return new Resource_1.Resource(name, url, {
        id: null,
        title: title,
        description: description,
        fields: fields,
        readableFields: readableFields,
        writableFields: writableFields,
        parameters: [],
        getParameters: function () { return Promise.resolve([]); },
    });
};
var buildOperationFromPathItem = function (httpMethod, operationType, pathItem) {
    return new Operation_1.Operation(pathItem.summary || operationType, operationType, {
        method: httpMethod.toUpperCase(),
        deprecated: !!pathItem.deprecated,
    });
};
/*
  Assumptions:
  RESTful APIs typically have two paths per resources: a `/noun` path and a
  `/noun/{id}` path. `getResources` strips out the former, allowing us to focus
  on the latter.

  In OpenAPI 3, the `/noun/{id}` path will typically have a `get` action, that
  probably accepts parameters and would respond with an object.
*/
function default_1(response, entrypointUrl) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var document, paths, serverUrlOrRelative, serverUrl, resources;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, jsonref_1.parse)(response, {
                        scope: entrypointUrl,
                    })];
                case 1:
                    document = (_a.sent());
                    paths = (0, getResources_1.default)(document.paths);
                    serverUrlOrRelative = "/";
                    if (document.servers) {
                        serverUrlOrRelative = document.servers[0].url;
                    }
                    serverUrl = new URL(serverUrlOrRelative, entrypointUrl).href;
                    resources = [];
                    paths.forEach(function (path) {
                        var splittedPath = (0, exports.removeTrailingSlash)(path).split("/");
                        var name = (0, inflection_1.pluralize)(splittedPath[splittedPath.length - 2]);
                        var url = "".concat((0, exports.removeTrailingSlash)(serverUrl), "/").concat(name);
                        var pathItem = document.paths[path];
                        if (!pathItem) {
                            throw new Error();
                        }
                        var title = (0, inflection_1.classify)(splittedPath[splittedPath.length - 2]);
                        var showOperation = pathItem.get;
                        var editOperation = pathItem.put || pathItem.patch;
                        if (!showOperation && !editOperation)
                            return;
                        var showSchema = showOperation
                            ? (0, lodash_get_1.default)(showOperation, "responses.200.content.application/json.schema", (0, lodash_get_1.default)(document, "components.schemas[".concat(title, "]")))
                            : null;
                        var editSchema = editOperation
                            ? (0, lodash_get_1.default)(editOperation, "requestBody.content.application/json.schema")
                            : null;
                        if (!showSchema && !editSchema)
                            return;
                        var showResource = showSchema
                            ? buildResourceFromSchema(showSchema, name, title, url)
                            : null;
                        var editResource = editSchema
                            ? buildResourceFromSchema(editSchema, name, title, url)
                            : null;
                        var resource = showResource !== null && showResource !== void 0 ? showResource : editResource;
                        if (!resource)
                            return;
                        if (showResource && editResource) {
                            resource = mergeResources(showResource, editResource);
                        }
                        var putOperation = pathItem.put;
                        var patchOperation = pathItem.patch;
                        var deleteOperation = pathItem.delete;
                        var pathCollection = document.paths["/".concat(name)];
                        var listOperation = pathCollection && pathCollection.get;
                        var createOperation = pathCollection && pathCollection.post;
                        resource.operations = tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], (showOperation
                            ? [buildOperationFromPathItem("get", "show", showOperation)]
                            : []), true), (putOperation
                            ? [buildOperationFromPathItem("put", "edit", putOperation)]
                            : []), true), (patchOperation
                            ? [buildOperationFromPathItem("patch", "edit", patchOperation)]
                            : []), true), (deleteOperation
                            ? [buildOperationFromPathItem("delete", "delete", deleteOperation)]
                            : []), true), (listOperation
                            ? [buildOperationFromPathItem("get", "list", listOperation)]
                            : []), true), (createOperation
                            ? [buildOperationFromPathItem("post", "create", createOperation)]
                            : []), true);
                        if (listOperation && listOperation.parameters) {
                            resource.parameters = listOperation.parameters
                                .filter(isRef)
                                .map(function (parameter) {
                                return new Parameter_1.Parameter(parameter.name, parameter.schema && isRef(parameter.schema)
                                    ? parameter.schema.type
                                        ? (0, getType_1.default)(parameter.schema.type)
                                        : null
                                    : null, parameter.required || false, parameter.description || "", parameter.deprecated);
                            });
                        }
                        resources.push(resource);
                    });
                    // Guess embeddeds and references from property names
                    resources.forEach(function (resource) {
                        var _a;
                        (_a = resource.fields) === null || _a === void 0 ? void 0 : _a.forEach(function (field) {
                            var name = (0, inflection_1.camelize)(field.name).replace(/Ids?$/, "");
                            var guessedResource = resources.find(function (res) { return res.title === (0, inflection_1.classify)(name); });
                            if (!guessedResource) {
                                return;
                            }
                            field.maxCardinality = field.type === "array" ? null : 1;
                            if (field.type === "object" || field.arrayType === "object") {
                                field.embedded = guessedResource;
                            }
                            else {
                                field.reference = guessedResource;
                            }
                        });
                    });
                    return [2 /*return*/, resources];
            }
        });
    });
}
exports.default = default_1;
//# sourceMappingURL=handleJson.js.map